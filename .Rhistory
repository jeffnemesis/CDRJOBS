setwd("E:/Package/R/CDRJOBS")
library(dplyr)
CDR_Job_Inten <- data.frame(
CDR = c("BECCS", "BECCS", "BECCS", "BECCS", "BECCS", "BECCS","BECCS", "DAC",
"OEW", "TEW", "Biochar", "Biochar", "Biochar", "Biochar", "Biochar"),
Total_removal_potential = c("2 million tons of CO2 removal", "10 million tons of CO2 removal",
"30 million tons of CO2 removal", "0.3 million tons of CO2 removal",
"2 million tons of CO2 removal", "0.4 million tons of CO2 removal",
"4.7 million tons of CO2 removal", "1 million tons of CO2 removal",
"3000 tons of CO2 removal", "3000 tons of CO2 removal", "0.2 million tons of CO2 removal",
"2.5 million tons of CO2 removal",
"2 million tons of CO2 removal", "2000 tons of CO2 removal", "0.7 million tons of CO2 removal"),
Job_potential = c("1350 jobs", "6700 jobs", "28190 jobs", "991 jobs", "1397 jobs", "375 jobs",
"360 jobs", "3428 jobs", "5 jobs", "5 jobs", "102 jobs (only industrial jobs)",
"77 jobs (only industrial jobs)", "42000 jobs", "42 jobs", "14700 jobs"),
Job_intensity = c(0.001, 0.001, 0.001,
0.003, 0.001, 0.001,
0.0001, 0.003, 0.002,
0.002,
0.001, 0.00003, 0.02,
0.02, 0.02)
) %>%
group_by(CDR) %>%
summarize( min_int = as.numeric(formatC(min(Job_intensity), format = "f", digits = 4)), mean_int = as.numeric(formatC(mean(Job_intensity), format = "f", digits = 4)), max_int = as.numeric(formatC(max(Job_intensity), format = "f", digits = 4)) ) %>% mutate(units = "jobs/tCO2 removed")
usethis::use_data(CDR_Job_Inten, overwrite = TRUE)
list.files("data")
load("data/CDR_Job_Inten.rda")
head(load("data/CDR_Job_Inten)
>
head(CDR_Job_Inten)
devtools::document()
devtools::load_all()
calculate_jobs
install.packages("CDRJOBS")
library(CDRJOBS)
library(rgcam)
# Define the path to the GCAM database
db_path <- "D:/gcam-cdr_1.0.2/output"    #Path to gcamdatabase for scenarios
# Connect to the GCAM database
db_link <- localDBConn(db_path, "trade")  #’trade’ can be replaced with name of database
# Define scenarios
scenarios <- c("EQP-A-MAIN", "CAP-A-MAIN", "REP-A", "EQP-B", "CAP-B", "REP-B")
# Add the scenario and query
CDR_tech <- addScenario(db_link, "CDR_jobs.dat", scenarios, "CDR_query.xml")
# Query the database for CDR outputs
CDR_Output <- getQuery(CDR_tech, "CDR by tech")
#Run job potential estimation
results <- calculate_jobs(CDR_Output, CDR_Job_Inten)
install.packages("CDRJOBS")
library(CDRJOBS)
library(rgcam)
# Define the path to the GCAM database
db_path <- "D:/gcam-cdr_1.0.2/output"    #Path to gcamdatabase for scenarios
# Connect to the GCAM database
db_link <- localDBConn(db_path, "trade")  #’trade’ can be replaced with name of database
# Define scenarios
scenarios <- c("EQP-A-MAIN", "CAP-A-MAIN", "REP-A", "EQP-B", "CAP-B", "REP-B")
# Add the scenario and query
CDR_tech <- addScenario(db_link, "CDR_jobs.dat", scenarios, "CDR_query.xml")
# Query the database for CDR outputs
CDR_Output <- getQuery(CDR_tech, "CDR by tech")
#Run job potential estimation
results <- calculate_jobs(CDR_Output, CDR_Job_Inten)
devtools::build()
devtools::install()
install.packages("CDRJOBS")
install.packages("CDRJOBS")
library(CDRJOBS)
library(rgcam)
# Define the path to the GCAM database
db_path <- "D:/gcam-cdr_1.0.2/output"    #Path to gcamdatabase for scenarios
# Connect to the GCAM database
db_link <- localDBConn(db_path, "trade")  #’trade’ can be replaced with name of database
# Define scenarios
scenarios <- c("EQP-A-MAIN", "CAP-A-MAIN", "REP-A", "EQP-B", "CAP-B", "REP-B")
# Add the scenario and query
CDR_tech <- addScenario(db_link, "CDR_jobs.dat", scenarios, "CDR_query.xml")
# Query the database for CDR outputs
CDR_Output <- getQuery(CDR_tech, "CDR by tech")
#Run job potential estimation
results <- calculate_jobs(CDR_Output, CDR_Job_Inten)
library(CDRJOBS)
library(rgcam)
library(dplyr)
# Define the path to the GCAM database
db_path <- "D:/gcam-cdr_1.0.2/output"    #Path to gcamdatabase for scenarios
# Connect to the GCAM database
db_link <- localDBConn(db_path, "trade")  #’trade’ can be replaced with name of database
# Define scenarios
scenarios <- c("EQP-A-MAIN", "CAP-A-MAIN", "REP-A", "EQP-B", "CAP-B", "REP-B")
# Add the scenario and query
CDR_tech <- addScenario(db_link, "CDR_jobs.dat", scenarios, "CDR_query.xml")
# Query the database for CDR outputs
CDR_Output <- getQuery(CDR_tech, "CDR by tech")
#Run job potential estimation
results <- calculate_jobs(CDR_Output, CDR_Job_Inten)
#view results
# View total jobs by year
head(results$Job_total_year)
# View jobs by technology and year
head(results$Job_by_tech_year)
# View jobs by technology
head(results$Job_cum_tech)
# View cumulative total jobs
head(results$Job_cum_total)
write.csv(results$Job_total_year, "Job_total_year.csv", row.names = FALSE)
write.csv(results$Job_by_tech_year, "Job_by_tech_year.csv", row.names = FALSE)
write.csv(results$Job_cum_tech, "Job_cum_tech.csv", row.names = FALSE)
write.csv(results$Job_cum_total, "Job_cum_total.csv", row.names = FALSE)
devtools::build()
devtools::install()
library(CDRJOBS)
library(rgcam)
library(dplyr)
# Define the path to the GCAM database
db_path <- "D:/gcam-cdr_1.0.2/output"    #Path to gcamdatabase for scenarios
# Connect to the GCAM database
db_link <- localDBConn(db_path, "trade")  #’trade’ can be replaced with name of database
# Define scenarios
scenarios <- c("EQP-A-MAIN", "CAP-A-MAIN", "REP-A", "EQP-B", "CAP-B", "REP-B")
# Add the scenario and query
CDR_tech <- addScenario(db_link, "CDR_jobs.dat", scenarios, "CDR_query.xml")
# Query the database for CDR outputs
CDR_Output <- getQuery(CDR_tech, "CDR by tech")
#Run job potential estimation
results <- calculate_jobs(CDR_Output, CDR_Job_Inten)
library(CDRJOBS)
library(rgcam)
library(dplyr)
# Define the path to the GCAM database
db_path <- "D:/gcam-cdr_1.0.2/output"    #Path to gcamdatabase for scenarios
# Connect to the GCAM database
db_link <- localDBConn(db_path, "trade")  #’trade’ can be replaced with name of database
# Define scenarios
scenarios <- c("EQP-A-MAIN", "CAP-A-MAIN", "REP-A", "EQP-B", "CAP-B", "REP-B")
# Add the scenario and query
CDR_tech <- addScenario(db_link, "CDR_jobs.dat", scenarios, "CDR_query.xml")
# Query the database for CDR outputs
CDR_Output <- getQuery(CDR_tech, "CDR by tech")
#Run job potential estimation
results <- calculate_jobs(CDR_Output, CDR_Job_Inten)
library(CDRJOBS)
library(rgcam)
library(dplyr)
# Define the path to the GCAM database
db_path <- "D:/gcam-cdr_1.0.2/output"    #Path to gcamdatabase for scenarios
# Connect to the GCAM database
db_link <- localDBConn(db_path, "trade")  #’trade’ can be replaced with name of database
# Define scenarios
scenarios <- c("EQP-A-MAIN", "CAP-A-MAIN", "REP-A", "EQP-B", "CAP-B", "REP-B")
# Add the scenario and query
CDR_tech <- addScenario(db_link, "CDR_jobs.dat", scenarios, "CDR_query.xml")
# Query the database for CDR outputs
CDR_Output <- getQuery(CDR_tech, "CDR by tech")
#Run job potential estimation
results <- calculate_jobs(CDR_Output, CDR_Job_Inten)
#view results
# View total jobs by year
head(results$Job_total_year)
# View jobs by technology and year
head(results$Job_by_tech_year)
# View jobs by technology
head(results$Job_cum_tech)
# View cumulative total jobs
head(results$Job_cum_total)
write.csv(results$Job_total_year, "Job_total_year.csv", row.names = FALSE)
write.csv(results$Job_by_tech_year, "Job_by_tech_year.csv", row.names = FALSE)
write.csv(results$Job_cum_tech, "Job_cum_tech.csv", row.names = FALSE)
write.csv(results$Job_cum_total, "Job_cum_total.csv", row.names = FALSE)
devtools::document()
devtools::document()
